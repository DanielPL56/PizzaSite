// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaSite.Persistent;

namespace PizzaSite.Persistent.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PizzaSite.Persistent.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int>("Crust")
                        .HasColumnType("int");

                    b.Property<bool>("GreenPeppers")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Onions")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<bool>("Pepperoni")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sausage")
                        .HasColumnType("bit");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PizzaSite.Persistent.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("GreenPepperCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LargeSizeCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MediumSizeCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OnionsCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PepperoniCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RegularCrustCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SausageCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SmallSizeCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThickCrustCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThinCrustCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
